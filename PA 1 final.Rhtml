
---
  title: "Reproduciable Research Project 1"

author: "Hoang Minh Lai"

date: "Friday, January 27, 2017"

output: html_document
---
  
## setting and getting the data

getwd()

[1] "C:/Users/Hoang/Documents"

## loading and processing the data


rawdata <- read.csv("D:/activity.csv")

## What is mean total number of steps taken per day?

## 1 Calculate the total number of steps taken per day

sumdata <- aggregate(rawdata$steps, by=list(rawdata$date), FUN=sum, na.rm=TRUE)

names(sumdata) <- c("date","total")

## Make a histogram of the total number of steps taken each day

hist(sumdata$total, main = "Total steps taken per day", breaks=seq(from=0, to=25000, by=2000), 
xlab="Total steps", col="yellow", ylim=c(0,40))

save.image("C:\\Users\\Hoang\\Desktop\\project 1")

## 3 Calculate and report the mean and median of the total number of steps taken per day

 mean(sumdata$total)

[1] 9354.23

 median(sumdata$total)

[1] 10395

## What is the average daily activity pattern?

 #1 Make a time series plot

 meanData <- aggregate(rawData$steps, by=list(rawData$interval), FUN=mean, na.rm=TRUE)

 meanData <- aggregate(rawdata$steps, by=list(rawdata$interval), FUN=mean, na.rm=TRUE)

 names(meanData) <- c("interval", "mean")

 
 plot(meanData$interval, meanData$mean, type="l", col="blue", lwd=2, xlab="minute", 
 ylab="averagenumberof steps",main="Time-series of the average number of steps per intervals")
 
##2 Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
 
 maximumnumsteps <- which(meanData$mean == max(meanData$mean))
 
 maxInterval <- meanData[maximumnumsteps, 1]
 
 maxInterval
[1] 835

## input missing value

## 1 Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
 
 NA_count <- sum(is.na(rawdata$steps))
 
## 2 Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
 
 NApos <- which(is.na(rawData$steps))
 
 NApos <- which(is.na(rawdata$steps))
 
 head(NApos)
[1] 1 2 3 4 5 6

 meanVec <- rep(mean(rawdata$steps, na.rm=TRUE), times=length(NApos))

 head(meanVec)
[1] 37.3826 37.3826 37.3826 37.3826 37.3826 37.3826
 
## 3 Create a new dataset that is equal to the original dataset but with the missing data filled in.
 
 rawdata[NApos, "steps"] <- meanVec
 
## 4 Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
 
 sumData <- aggregate(rawdata$steps, by=list(rawdata$date), FUN=sum)
 
 names(sumData) <- c("date", "total")
 
 hist(sumData$total, main ="Total number of steps taken per day", breaks=seq(from=0, to=25000, b
 y=2000), xlab="total steps", col="green", ylim=c(0,40))
 
## Are there differences in activity patterns between weekdays and weekends?
 
##1 Create a new factor variable in the dataset with two levels  weekday and weekend indicating whether a given date is a weekday or weekend day.
 
 weekday.or.weekend <- function(date) {
+
day <- weekdays(date)

+   if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))

+     return("weekday")

+   else if (day %in% c("Saturday", "Sunday"))

+     return("weekend")

+   else

+     stop("invalid date")

+ }

 

 rawdata$date <- as.Date(rawdata$date)

 rawdata$day <- sapply(rawdata$date, FUN=weekday.or.weekend)

##2 Make a panel plot containing a time series plot

 library(ggplot2)

 ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +

+   xlab("Interval") + ylab("Number of steps") 

 averages <- aggregate(steps ~ interval + day, data=rawdata, mean)

 ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + xlab("Interval") + 
 ylab("Number of steps")








